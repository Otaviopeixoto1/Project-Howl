#pragma kernel ClearCells
#pragma kernel MarkCells
#pragma kernel GenerateMesh



struct Vert 
{
    float4 position;
    float4 normal;
};

uint totalCells;
uint chunkSize;





sampler2D _cloudNoiseTex;
//StructuredBuffer<float> densityVolumeIn; // size = total_amount_of_density_cells


RWStructuredBuffer<uint> cellData; // size = total_amount_of_cells (many will be empty)
//AppendStructuredBuffer<uint> cellData;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Either reduce cell data memory usage with append buffer but create another buffer for vert ids (to be used in triangulation)
// Or KEEP having unused cellData with many unused threads as well (in theory its the same amount of threads that are unused
// but there might be divergence performance issues)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//we append the celldata for building verts and trigs into a buffer. store the cell coord/ind. And also fill vert offset buffer
//read this append buffer
//the offset buffer can be used to find where to put the final vert (after scan).
//// we use the cell coord to index into the offset buffer and the offset to index into the final vertex buffer

//WE Need to MAP INDEX BUFFER ID INTO VERTEX BUFFER ID
// WE ITERATE OVER ALL POSSIBLE INDEXBUFFER IDs (3 * 5 * total_amount_of_cells), REMOVE THOSE THAT PASS THE COUNT OF TOTAL INDS
// ON EACH ITERATION, GET FROM THE INDEXBUFFER IDs TO VERTEX ID

//after placing verts, use the celldata + offsets to build trig ind buffer. The triangle order doesnt matter

RWStructuredBuffer<uint2> offsetBuffer; // size = total_amount_of_cells. Used to map all data from vertData into vertexBuffer and indexBuffer


//Helpers for the vert and triangle generation pass
cbuffer MSEdgeLUTs 
{
    float4 edge_start[4];
    float4 edge_dir[4];
    float4 edge_end[4];
    float4 edge_axis[4];  // 0 for x edges, 1 for y edges, 2 for z edges.
};

//SET THESE AS CBUFFERS:
StructuredBuffer<uint> caseToLineNum; // size = 256 (one entry for each cube case)
StructuredBuffer<int2> lineConnectTable;   // size = 256*5 = 1280 (256 cases; up to 15 (0/3/6/9/12/15) verts output for each.)


//OUTPUTS: 
// use vertData to build this vertexBuffer
RWStructuredBuffer<Vert> vertexBuffer; // size = 3 * total_amount_of_cells (max amount of unique vertices)

// use cellData (with triangle data) for this indexBuffer
RWStructuredBuffer<uint> indexBuffer; // size = 3 * 5 * total_amount_of_cells





uint getCellID(uint2 coord) 
{
    return (chunkSize * coord.y) + coord.x;
}
uint getCellCornerID(uint2 coord) 
{
    return ((chunkSize+1) * coord.y) + coord.x;
}

// 1) clear offset buffer
[numthreads(512, 1, 1)]
void ClearCells (uint3 id : SV_DispatchThreadID)
{
    if (id.x < totalCells)
    {
        offsetBuffer[id.x] = uint2(0,0);
    }
    
}

// 2) initialize offset and cellData buffers
[numthreads(32, 32, 1)]
void MarkCells (uint3 id : SV_DispatchThreadID)
{
    uint maxComp = max(id.x, id.y);
    if (maxComp < (chunkSize))
    {
        uint cellID = getCellID(id.xy);

        float4 field0123;
        float2 cornerOffsets = float2(1,0);

        field0123.x = tex2Dlod(_cloudNoiseTex, float4((id.xy + cornerOffsets.yy)/float(chunkSize + 1), 0, 0)).r;
        field0123.y = tex2Dlod(_cloudNoiseTex, float4((id.xy + cornerOffsets.yx)/float(chunkSize + 1), 0, 0)).r;
        field0123.z = tex2Dlod(_cloudNoiseTex, float4((id.xy + cornerOffsets.xx)/float(chunkSize + 1), 0, 0)).r;
        field0123.w = tex2Dlod(_cloudNoiseTex, float4((id.xy + cornerOffsets.xy)/float(chunkSize + 1), 0, 0)).r;


        uint4 i0123 = (uint4)saturate(field0123*99999); // negative values turn to 0 and positive values to 1
        int squareCase = (i0123.x) | (i0123.y << 1) | (i0123.z << 2) | (i0123.w << 3);

        //ONLY edges 3 and 0 need to be maked in order to not generate unnecessary vertices. 

        // Using Normal Structured Buffer
        //the cube corners 0,3,1,4 are the ones that matter (they will be used for testing the three unique verts on the cell)
        int bit0 = i0123.x;// (squareCase     ) & 1; 
        int bit3 = i0123.w;// (squareCase >> 3) & 1;
        int bit1 = i0123.y;// (squareCase >> 1) & 1;

        int2 build_vert_on_edge = abs(int2(bit3,bit1) - bit0.xx);
        uint vertCount = build_vert_on_edge.x + build_vert_on_edge.y;

        uint2 e3_e0_offsets = uint2(1,1);
        e3_e0_offsets.y = build_vert_on_edge.x; // 1 if edge 3 is marked, 0 otherwise
        e3_e0_offsets.x = 1 - build_vert_on_edge.x;// 0 if edge 0 is marked, 1 otherwise (in this case, the offset is actually invalid but we dont need to check it)

        uint lineCount = caseToLineNum[squareCase] * (maxComp < (chunkSize - 1)); //cells on the edge of the grid must generate verts but no lines

                                                            //the edge 3 and 0 offsets need to be stored for building the index list
        cellData[cellID] = (vertCount << 28) | (lineCount << 24) | (e3_e0_offsets.x << 20) | (e3_e0_offsets.y << 16) | (squareCase); 

        //add the vert and index counts to offset buffers          
        offsetBuffer[cellID] = uint2(vertCount, 2 * lineCount);
    
    }
}


void GenerateVertex(uint2 cellPosition, uint edgeNum, int totalOffset)
{
    // get the density values at the two ends of this edge of the cell,
    // then interpolate to find the point (t in 0..1) along the edge 
    // where the density value hits zero.  
    float str0 = tex2Dlod(_cloudNoiseTex, float4((cellPosition.xy + edge_start[edgeNum].xy)/float(chunkSize + 1), 0, 0)).r;
    float str1 = tex2Dlod(_cloudNoiseTex, float4((cellPosition.xy + edge_end[edgeNum].xy)/float(chunkSize + 1), 0, 0)).r;


    float t = saturate(str0/(str0 - str1));  // 'saturate' keeps occasional crazy stray triangle from appearing at edges

    // reconstruct the interpolated point and place a vertex there.
    float2 pos_within_cell = edge_start[edgeNum].xy + t.xx * edge_dir[edgeNum].xy;  
    float2 wsCoord = ((float2)cellPosition + pos_within_cell)/float(chunkSize + 1) - 0.5f;                                    

    //output.position.xyz  = wsCoord.xyz;
    vertexBuffer[totalOffset].position.xyzw = float4(wsCoord.xy, 0, 1);
    //vertexBuffer[totalOffset] = output;

    /*
    uint2 offs = uint2(1,0);    //USE ANALYTICAL GRADIENT
    float4 grad;                
    grad.w = densityVolumeIn[getCellCornerID(cellPosition + offs.yyy)];
    grad.x = densityVolumeIn[getCellCornerID(cellPosition + offs.xyy)] - grad.w;
    grad.y = densityVolumeIn[getCellCornerID(cellPosition + offs.yxy)] - grad.w;
    grad.z = densityVolumeIn[getCellCornerID(cellPosition + offs.yyx)] - grad.w;
    grad.xyz = normalize(grad.xyz);

    vertexBuffer[totalOffset].normal.xyzw = grad;*/
}

void GenerateLine(uint2 cellPosition, int2 edgeNumsForLine, int totalOffset)
{
    int2 edgePosition; 
    uint edgeOffsets[3]; //store this into cell data
    uint cellID;
    uint cData;
    uint edgeOffset;
    //use the edgePosition to actually sample cell data for the cells containing the edges
    //in these cells, using the edge_axis, we can sample the actual index of the vert inside the vertbuffer
    //We can restructure the edge axis to map all eges to the main edges (3,0 and 8)

    
    // THE LUTS MIGHT NOT BE USEFUL SINCE THERE ARE ONLY 2 CASES TO COVER

    edgePosition = cellPosition + (int2)edge_start[ edgeNumsForLine.x ].xy;
    cellID = getCellID(edgePosition);
    cData = cellData[cellID];
    edgeOffset = ((cData >> (20 - 4 * (uint)edge_axis[ edgeNumsForLine.x ].x)) & 0x0F); 
    indexBuffer[totalOffset - 0] = (offsetBuffer[cellID].x - 1) - edgeOffset; 

    edgePosition = cellPosition + (int2)edge_start[ edgeNumsForLine.y ].xy;
    cellID = getCellID(edgePosition);
    cData = cellData[cellID];
    edgeOffset = ((cData >> (20 - 4 * (uint)edge_axis[ edgeNumsForLine.y ].x)) & 0x0F); 
    indexBuffer[totalOffset - 1] = (offsetBuffer[cellID].x - 1) - edgeOffset;
}

[numthreads(32, 32, 1)]
void GenerateMesh (uint3 id : SV_DispatchThreadID)
{
    //remove edge cells as well
    uint maxComp = max(id.x, id.y);
    if (maxComp < (chunkSize))
    {
        uint cellID = getCellID(id.xy);
        uint cData = cellData[cellID];
        uint2 offsets = offsetBuffer[cellID];

        uint squareCase  = (cData) & 0xFF;
        uint2 e3_e0_offsets = ((cData.xx >> uint2(20,16)) & 0x0F);
        uint lineCount  = (cData >> 24) & 0x0F;
        uint vertCount = (cData >> 28) & 0x0F;


        uint activeEdges[2];
        activeEdges[e3_e0_offsets.x] = 3;
        activeEdges[e3_e0_offsets.y] = 0;
        

        for (uint i = 0; i < vertCount; i++)
        {  
            GenerateVertex(id.xy, activeEdges[i], (offsets.x - 1) - i);
        }


        for (uint j = 0; j < lineCount; j++)
        {
            int2 edgeNumsForLine = lineConnectTable[squareCase * 2 + j].xy;
            GenerateLine(id.xy, edgeNumsForLine, (offsets.y - 1) - 2 * j); 
        }
        
    }
}
